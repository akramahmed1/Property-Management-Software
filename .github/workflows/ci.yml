name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        cd src/backend && npm install
        cd ../frontend && npm install
        cd ../../tests && npm install
    
    - name: Run linting
      run: |
        npm run lint:backend
        npm run lint:frontend
    
    - name: Run type checking
      run: |
        cd src/backend && npm run type-check
        cd ../frontend && npm run type-check
    
    - name: Run unit tests
      run: |
        cd tests && npm run test:unit
    
    - name: Run integration tests
      run: |
        cd tests && npm run test:integration
    
    - name: Run E2E tests
      run: |
        cd tests && npm run test:e2e
    
    - name: Generate coverage report
      run: |
        cd tests && npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        cd src/backend && npm install
        cd ../frontend && npm install
    
    - name: Build backend
      run: |
        cd src/backend && npm run build
    
    - name: Build frontend
      run: |
        cd src/frontend && npm run build
    
    - name: Build Docker images
      run: |
        docker build -t property-management-backend:latest -f src/backend/Dockerfile .
        docker build -t property-management-frontend:latest -f src/frontend/Dockerfile .
    
    - name: Test Docker images
      run: |
        docker run --rm property-management-backend:latest --version
        docker run --rm property-management-frontend:latest --version

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        npm audit --audit-level moderate
        cd src/backend && npm audit --audit-level moderate
        cd ../frontend && npm audit --audit-level moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  deploy-staging:
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  deploy-production:
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here